;============================================================================;
; boot0.asm: stage0, load and initialize stage1                              ;
;============================================================================;

;============================================================================;
[bits 16] ; we are working with 16-bits instructions
;[org 0x7c00] ; set the offset of all referenced addresses to 0x7c00

;============================================================================;
;================================== DEFINES =================================;
;============================================================================;

%include "DEF.INC"

; Code segment (CODE_SEGMENT:CODE_OFFSET) = (0000:7c00)
; The code offset is provided by the absolute long jump
CODE_SEGMENT        equ 0x0000

; Data segments
DATA_SEGMENT        equ 0x0000
EXTRA_DATA_SEGMENT  equ 0x0000

; Stack segment (STACK_SEGMENT:STACK_BASE_OFFSET) = (0000:8000) --> (0000:7e00) // 512 bytes
STACK_SEGMENT       equ 0x0000
STACK_BASE_OFFSET   equ 0x8000

; Stage 1's location in RAM
BOOT1_START_ADDR    equ 0x1000
; Stage 1's location on disk
BOOT1_HEAD          equ 0
BOOT1_NB_SECTORS    equ 35     ; 17.5kB


;============================================================================;
;================================= CODE =====================================;
;============================================================================;

section .text
    global _start
_start:
    jmp        main

%include "UTIL.INC"
;============================================================================;

main:

init_registers:
    cli                              ; disable interrupts while changing registers

    ; canonicalize the instruction pointer
    ;-------------------------------------
    ; The BIOS loads the MBR and begins its execution at the address 0x7c00.
    ; This adress can be reprensented in real mode as 0000:7c00 (%cs:%ip).
    ; However some BIOSes actually begin the execution at the adress 07c0:0000.
    ; To deal with this discrepancy, we have to canonicalize %cs:%ip to a
    ; known code_segment:offset pair. For this purpose, we use an absolute
    ; long jump as follows.
    jmp        DWORD CODE_SEGMENT:.next_line
.next_line:

    ; As the init values of data segment, extra data segment and stack segment are 0,
    ; we don't use the defined values above (DATA_SEGMENT, EXTRA_DATA_SEGMENT,
    ; STACK_SEGMENT).

    ; load segment registers
    ; %DS : data segment for the bootloader (rodata, data, bss and stack)
    ; %ES : extra data segment used to load the second stage bootloader
    xor        ax, ax
    mov        ds, ax
    mov        es, ax

    ; save boot drive number
    mov        BYTE [boot_drv], dl

    ; prepare stack segment
    mov        ss, ax
    mov        sp, STACK_BASE_OFFSET ; set the stack pointer to the top of the stack

    sti                              ; re-enable interrupts

drive_reset:
    ; Reset disk drive
    ; The drive number is contained in %dl (initialized by the BIOS),
    ; do not touch it, just give it in argument to the drive's reset
    ; BIOS service.
    ; %dl : boot drive number already initialized
    mov        ah, 0x00              ; call BIOS service (0x00, BIOS_INT_DRIVE)
    int        BIOS_INT_DRIVE
    jc         fatal_error          ; if an error occurs, CF(carry flag) is set to 1

drive_read_boot1:
    ; Read 'boot1' from the hard disk drive.
    ; 'boot0' is located at (C,H,S)=(0,0,1). 'boot1' follows at (0,0,2) until (0,0,37).
    ; 'boot1' will be stored at EXTRA_DATA_SEGMENT:BOOT1_START_ADDR and will occupy 17.5kB.
    ;
    ; Details about the BIOS service :
    ; - the drive number in %bl stays untouched.
    ; - the head number is stored in %dh.
    ; - the 10-bits track/cylinder number is stored in 2 registers, %cl (bits 9,8 of
    ;   the track number on bits 7,6) and %ch (bits 7,0 of the track number on bits
    ;   7,0).
    ; - the 6-bits sector number is stored in %cl (bits 5,0).
    ;
    ; %al <-- 35
    ; %bx <-- @buffer
    ; %ch <-- 0
    ; %cl <-- 2
    ; %dl : boot drive number already initialized
    ; %dh <-- 0
    mov        dh, BOOT1_HEAD       ; head number = 0
    mov        al, BOOT1_NB_SECTORS
    mov        bx, BOOT1_START_ADDR ; address of buffer --> EXTRA_DATA_SEGMENT:new_offset_sector
    mov        cx, 0x0002           ; track number = 0, sector number = 2
    mov        ah, 0x02             ; call BIOS service (0x02, BIOS_INT_DRIVE)
    int        BIOS_INT_DRIVE
    jc         fatal_error         ; if an error occurs, CF(carry flag) is set to 1
                                    ; CF set to 0, all the sectors were read correctly

    ; jump to boot1's entry point (but stay in real mode)
    jmp        DWORD EXTRA_DATA_SEGMENT:BOOT1_START_ADDR

gdt_init:
    mov ax, gdtend
    mov bx, gdt
    sub ax, bx ; compute GDT's limit
    mov WORD [gdtptr], ax

    xor eax, eax ; compute linear of GDT
    mov ax, ds
    shl eax, 4
    xor ebx, ebx
    mov bx, gdt
    add eax, ebx
    mov DWORD [gdtptr + 2], eax

switch_to_protected_mode:
    cli             ; disable interrupts (BIOS IVT not available anymore)
    lgdt [gdtptr]   ; load global descriptor table
    mov eax, cr0
    or  ax, 1
    mov cr0, eax    ; set PE bit of CR0

    jmp .next
.next:
    mov ax, (gdt - gdt_ds) ; offset data segment descriptor = 0x10
    mov ds, ax
    mov fs, ax
    mov gs, ax
    mov es, ax
    mov ss, ax
    mov esp, 0x9F000 ; just below EBDA (Extended BIOS Data Area) [0x9FC00]

    ; jump to boot1's entry point
    jmp DWORD (gdt - gdt_cs):BOOT1_START_ADDR ; initialize code segment

fatal_error:
    mov        si, msg_please_reboot
    call       prints
    cli                              ; disable interrupts permanently
    hlt                              ; halt the CPU until the user performs a manual reboot


;============================================================================;
;================================== DATA ====================================;
;============================================================================;
section .rodata
     msg_please_reboot       db 'An error was encountered, please reboot', CHAR_NULL

section .bss
     boot_drv                resb 1

section .data
gdt:
     db 0, 0, 0, 0, 0, 0, 0, 0
gdt_cs: ; flat model
     db 0xFF, 0xFF, 0x0, 0x0, 0x0, 10011011b, 11011111b, 0x0
gdt_ds: ; flat model
     db 0xFF, 0xFF, 0x0, 0x0, 0x0, 10010011b, 11011111b, 0x0
gdtend:
     ;--------------------------------------------------------------------
gdtptr:
     dw 0  ; limite
     dd 0  ; base
     ;---------------------------


%define __SWAP_16__(n)  (((n) << 8) | ((n) >> 8))

;====================
; MBR Partition table
;====================

%define BOOTABLE_YES 0x80
%define BOOTABLE_NO  0x0

%define ID_FAT12 0x01

; first partition table entry at offset 0x1be
section .partition1
    %define P1_START_HEAD     0
    %define P1_START_SECTOR   2
    %define P1_START_CYLINDER 0

    %define P1_END_HEAD       0
    %define P1_END_SECTOR     18
    %define P1_END_CYLINDER   79

    p1_boot_indicator:               db BOOTABLE_YES
    p1_starting_head:                db P1_START_HEAD
    p1_starting_sector_and_cylinder: dw ((P1_START_CYLINDER << 6) | P1_START_SECTOR)
    p1_system_id:                    db ID_FAT12
    p1_ending_head:                  db P1_END_HEAD
    p1_ending_sector_and_cylinder:   dw ((P1_END_CYLINDER << 6) | P1_END_SECTOR)
    p1_relative_sector:              dd 0 ; for now, we cannot fill this field
    p1_total_sectors:                dd 1440 ; = 80 * 18

section .partition2
    times 16 db 0 ; unused partition

section .partition3
    times 16 db 0 ; unused partition

section .partition4
    times 16 db 0 ; unused partition
